import java.text.SimpleDateFormat

buildscript {

	// ---------------------------------------------------------------------------
	// Project targets the following versions of libraries, tools etc..	
	ext.targetH2Version 		= '1.3.176'
	ext.targetSpringVersion 	= '4.1.6.RELEASE'
	ext.targetJUnitVersion 		= '4.12'
	ext.targetSLF4JVersion 		= '1.7.12'
	ext.javaBuildVersion 		= '1.8'
	ext.springBootVersion		= '1.2.3.RELEASE'


	// ----------------------------------------------------------------------------
	// Plugins

	repositories {
		mavenLocal()
		jcenter()
	}

	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6'
	}
}

ext.currentVersion = '1.0.0-SNAPSHOT'
def globalVersion = new Version(currentVersion)

subprojects {

	repositories {
		jcenter()
	}

	apply plugin: 'java'

	configurations {
		all*.exclude group: 'commons-logging', module: 'commons-logging'
	}

	dependencies {
		compile "org.slf4j:jcl-over-slf4j:$targetSLF4JVersion"
		compile "org.slf4j:jul-to-slf4j:$targetSLF4JVersion"
		testCompile "junit:junit:$targetJUnitVersion"
	}

	group = 'org.andriesfc.h2springtools'
	version = globalVersion
	status = version.status

	sourceCompatibility = javaBuildVersion
	targetCompatibility = javaBuildVersion


	// ---------------------------------------------------------------------------------------------------------
	// Publishing
	// ---------------------------------------------------------------------------------------------------------

	// add javadoc/source jar tasks as artifacts

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar, javadocJar
	}


}

class Version {
	String originalVersion
	String thisVersion
	String status
	Date buildTime

	Version(String versionValue) {
		buildTime = new Date()
		originalVersion = versionValue
		if (originalVersion.endsWith("-SNAPSHOT")) {
			status = 'integration'
			thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
		} else {
			status = 'release'
			thisVersion = versionValue
		}
	}

	String getTimestamp() {
		def format = new SimpleDateFormat('yyyyMMddHHmmss')
		format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
		return format.format(buildTime)
	}

	@Override
	String toString() {
		return this.thisVersion
	}
}

